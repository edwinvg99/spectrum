// Configuraci√≥n del cach√©
const CACHE_KEYS = {
  PLAYERS_DATA: 'valorant_players_cache',
  CACHE_METADATA: 'valorant_cache_metadata'
};

const CACHE_CONFIG = {
  TTL: 5 * 60 * 1000, // 5 minutos en milisegundos
  MAX_AGE: 30 * 60 * 1000, // 30 minutos m√°ximo
  VERSION: '1.0.0'
};

export const cacheService = {
  // Guardar datos en cach√©
  savePlayersData(playersData) {
    try {
      const cacheData = {
        data: playersData,
        timestamp: Date.now(),
        version: CACHE_CONFIG.VERSION
      };
      
      localStorage.setItem(CACHE_KEYS.PLAYERS_DATA, JSON.stringify(cacheData));
      
      // Guardar metadata del cach√©
      const metadata = {
        lastUpdate: Date.now(),
        playersCount: playersData.length,
        version: CACHE_CONFIG.VERSION
      };
      localStorage.setItem(CACHE_KEYS.CACHE_METADATA, JSON.stringify(metadata));
      
      console.log('üíæ Datos guardados en cach√©:', playersData.length, 'jugadores');
      return true;
    } catch (error) {
      console.error('‚ùå Error guardando en cach√©:', error);
      return false;
    }
  },

  // Obtener datos del cach√©
  getPlayersData() {
    try {
      const cachedData = localStorage.getItem(CACHE_KEYS.PLAYERS_DATA);
      if (!cachedData) {
        console.log('üì≠ No hay datos en cach√©');
        return null;
      }

      const parsedData = JSON.parse(cachedData);
      
      // Verificar versi√≥n
      if (parsedData.version !== CACHE_CONFIG.VERSION) {
        console.log('üîÑ Versi√≥n de cach√© obsoleta, limpiando...');
        this.clearCache();
        return null;
      }

      const age = Date.now() - parsedData.timestamp;
      
      // Si los datos son muy antiguos, no los uses
      if (age > CACHE_CONFIG.MAX_AGE) {
        console.log('‚è∞ Datos de cach√© muy antiguos, limpiando...');
        this.clearCache();
        return null;
      }

      console.log(`üì¶ Datos recuperados del cach√© (${Math.round(age / 1000)}s de antig√ºedad)`);
      return {
        data: parsedData.data,
        age: age,
        isStale: age > CACHE_CONFIG.TTL
      };
    } catch (error) {
      console.error('‚ùå Error leyendo cach√©:', error);
      this.clearCache();
      return null;
    }
  },

  // Verificar si el cach√© est√° fresco
  isCacheFresh() {
    const cachedData = this.getPlayersData();
    return cachedData && !cachedData.isStale;
  },

  // Limpiar cach√©
  clearCache() {
    try {
      localStorage.removeItem(CACHE_KEYS.PLAYERS_DATA);
      localStorage.removeItem(CACHE_KEYS.CACHE_METADATA);
      console.log('üßπ Cach√© limpiado');
      return true;
    } catch (error) {
      console.error('‚ùå Error limpiando cach√©:', error);
      return false;
    }
  },

  // Obtener metadata del cach√©
  getCacheMetadata() {
    try {
      const metadata = localStorage.getItem(CACHE_KEYS.CACHE_METADATA);
      return metadata ? JSON.parse(metadata) : null;
    } catch (error) {
      console.error('‚ùå Error obteniendo metadata del cach√©:', error);
      return null;
    }
  },

  // Obtener informaci√≥n del estado del cach√©
  getCacheStatus() {
    const cachedData = this.getPlayersData();
    const metadata = this.getCacheMetadata();
    
    if (!cachedData || !metadata) {
      return {
        hasCache: false,
        age: 0,
        isStale: true,
        nextUpdateIn: 0
      };
    }

    const age = cachedData.age;
    const nextUpdateIn = Math.max(0, CACHE_CONFIG.TTL - age);
    
    return {
      hasCache: true,
      age: age,
      isStale: cachedData.isStale,
      nextUpdateIn: nextUpdateIn,
      lastUpdate: new Date(metadata.lastUpdate).toLocaleString('es-ES'),
      playersCount: metadata.playersCount
    };
  },

  // M√©todo para obtener configuraci√≥n del cach√©
  getConfig() {
    return CACHE_CONFIG;
  },

  // M√©todo para verificar si localStorage est√° disponible
  isLocalStorageAvailable() {
    try {
      const test = '__cache_test__';
      localStorage.setItem(test, test);
      localStorage.removeItem(test);
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è localStorage no est√° disponible');
      return false;
    }
  }
};

export default cacheService;